#pragma kernel CSEvolve
#pragma kernel CSReset

#pragma kernel CSWorldEvolve
#pragma kernel CSWorldReset

#pragma enable_d3d11_debug_symbols

#include "input.cginc"

#define PI (3.14159265359)

struct BallData
{
    float2 pos;
    float2 speed;
    uint status;
};

uniform RWStructuredBuffer<BallData> _BallData;
uniform uint _BallDataSize;

struct WorldData
{
    float2 handle0Pos;
    float2 handle0Size;
    float2 handle1Pos;
    float2 handle1Size;

    float2 worldSize;

    uint player0Score;
    uint player1Score;
};

uniform RWStructuredBuffer<WorldData> _WorldData;

[numthreads(32,1,1)]
void CSEvolve (uint3 id : SV_DispatchThreadID)
{
    if (id.x < _BallDataSize)
    {
        _BallData[id.x].pos += _BallData[id.x].speed * GetDT();
        bool2 outAndSpeedPlus = _BallData[id.x].pos > _WorldData[0].worldSize && _BallData[id.x].speed > 0;
        bool2 outAndSpeedMinus = _BallData[id.x].pos < -_WorldData[0].worldSize && _BallData[id.x].speed < 0;
        _BallData[id.x].speed *= (outAndSpeedPlus || outAndSpeedMinus) ? -1 : 1;
    }
}

float2 Reflect(float2 direction, float2 normal){return direction - 2*(dot(direction,normal)*normal);}
[numthreads(32,1,1)]
void CSReset (uint3 id : SV_DispatchThreadID)
{
    if (id.x < _BallDataSize)
    {
        float angle = id.x * (2 * PI / _BallDataSize);
        float speed = id.x * (2.0 / _BallDataSize)+1;
        _BallData[id.x].pos = float2(0, 0);
        _BallData[id.x].speed = float2(cos(angle), sin(angle)) * speed;
    }
}

[numthreads(1,1,1)]
void CSWorldEvolve (uint3 id : SV_DispatchThreadID)
{
}

[numthreads(1,1,1)]
void CSWorldReset (uint3 id : SV_DispatchThreadID)
{
    _WorldData[0].worldSize = 5;
    _WorldData[0].player0Score = 0;
    _WorldData[0].player1Score = 0;
}